from pydantic import BaseModel, validator
from typing import Optional, List
from datetime import datetime
from enum import Enum

# Enum for task priority levels
class TaskPriority(str, Enum):
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"

# Enum for task status options
class TaskStatus(str, Enum):
    PENDING = "pending"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"

# Pydantic model for creating tasks
class TaskCreate(BaseModel):
    user_id: int  # ID of the user the task belongs to
    title: str  # Task title
    description: Optional[str] = None  # Optional task description
    due_date: Optional[datetime] = None  # Optional due date for the task
    priority: TaskPriority = TaskPriority.MEDIUM  # Task priority, default is medium
    ai_generated: Optional[bool] = False  # Whether the task was generated by AI

    # Validator to ensure the title is not empty and does not exceed 100 characters
    @validator('title')
    def title_must_not_be_empty(cls, v):
        if not v or not v.strip():
            raise ValueError('Title cannot be empty')
        if len(v) > 100:
            raise ValueError('Title must be 100 characters or less')
        return v.strip()

# Pydantic model for updating tasks
class TaskUpdate(BaseModel):
    title: Optional[str] = None  # Optional new title
    description: Optional[str] = None  # Optional new description
    due_date: Optional[datetime] = None  # Optional new due date
    priority: Optional[TaskPriority] = None  # Optional new priority
    status: Optional[TaskStatus] = None  # Optional new status

    # Validator to ensure the new title is not empty if provided
    @validator('title')
    def title_must_not_be_empty(cls, v):
        if v is not None:
            if not v.strip():
                raise ValueError('Title cannot be empty')
            if len(v) > 100:
                raise ValueError('Title must be 100 characters or less')
            return v.strip()
        return v

# Pydantic model for task responses
class TaskResponse(BaseModel):
    task_id: int  # Task ID
    user_id: int  # Associated user ID
    title: str  # Task title
    description: Optional[str] = None  # Task description
    due_date: Optional[datetime] = None  # Task due date
    priority: str  # Task priority as string
    status: str  # Task status as string
    ai_generated: bool  # Whether the task was generated by AI
    created_at: datetime  # Creation timestamp
    updated_at: datetime  # Last update timestamp

    # âœ… Pydantic v2 configuration for ORM integration
    model_config = {
        "from_attributes": True  # Replaces orm_mode in Pydantic v2
    }
