from sqlalchemy import Column, Integer, String, Text, Boolean, DateTime, ForeignKey, Index
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship

from final_project.db import Base

# SQLAlchemy model for storing notifications
class NotificationDB(Base):
    __tablename__ = "notification"

    notification_id = Column(Integer, primary_key=True, autoincrement=True)  # Primary key
    user_id = Column(Integer, ForeignKey("users.user_id", ondelete="CASCADE"), nullable=False)  # Link to UserDB
    title = Column(String(255), nullable=False)  # Notification title
    message = Column(Text, nullable=False)  # Notification message
    is_read = Column(Boolean, default=False)  # Whether the notification has been read
    notification_type = Column(String(50), nullable=False)  # Type of notification (e.g., "reminder", "system")
    ai_generated = Column(Boolean, default=False)  # Whether the notification was generated by AI
    created_at = Column(DateTime, server_default=func.now())  # Creation timestamp

    __table_args__ = (
        Index("idx_notification_user_id", "user_id"),  # Index on user_id
        Index("idx_notification_is_read", "is_read"),  # Index on is_read
        Index("idx_notification_created_at", "created_at"),  # Index on created_at
        Index("idx_notification_type", "notification_type"),  # Index on notification_type
    )

    # Relationship with UserDB
    user = relationship("UserDB", back_populates="notifications")

# In UserDB model:
# notifications = relationship("NotificationDB", back_populates="user", cascade="all, delete-orphan")